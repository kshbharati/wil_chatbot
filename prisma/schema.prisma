
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//Types of User
enum UserType{
  ADMIN
  CLIENT
  AGENT 
}

//Type of Enquiry
enum EnquiryType{
  LISTING
  ACCOUNT
  TIME
}

//Type of Image for a property
enum PropertyImageType{
  FEATURED
  ADDITIONAL
}

//PropertyType
enum PropertyType{
  LEASE
  SELL
}

enum States{
  ACT
  NSW
  WA
  SA
  NT
  VIC
  QLD
  TAS
}
//User Model
model User {
  id  String @id @default(cuid())
  name String? @db.VarChar(255)
  email String @unique(map: "email") @db.VarChar(255)
  userType UserType @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  contact Contact?

  inquiry Enquiry[]

  property Property[] //Lists all the properties handled by an agent.
  @@map("user")
}

//User Contact Model One to One with User Model
model Contact {
  id  String @id @default(cuid())

  landline String? @db.VarChar(20)
  mobile String? @db.VarChar(20)
  website String? @db.VarChar(20)
  facebook String? @db.VarChar(255)
  twitter String? @db.VarChar(255)
  instagram String? @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  
  user User? @relation(fields: [userId], references:[id])
  userId String? @unique
  @@map("contact_info")
}

//Property Model Many To One With User Model
model Property {
  id  String @id @default(cuid())
  name String? @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  propertyInformation PropertyInformation?
  address Address?
  
  enquiry Enquiry[]
  
  propertyImages PropertyImages[]

  agent User? @relation(fields: [userId], references:[id])
  userId String?
  @@map("properties")
}


model PropertyInformation{
  id String @id @default(cuid())
  propertyDescription String? @db.LongText
  propertyType PropertyType @default(LEASE)
  floorSize Int? 
  quantityOfBedrooms Int @default(1)
  quantityOfBathrooms Int @default(1)
  quantityOfParking Int @default(0)
  extras String? @db.LongText 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  property Property? @relation(fields: [propertyId], references: [id])
  propertyId String @unique

  @@map("property_information")  
}
model Address{
  id  String @id @default(cuid())
  addressLine1 String? @db.LongText
  addressLine2 String? @db.LongText
  suburb String @db.VarChar(255) @default("Canberra")
  postCode String @db.VarChar(10) @default("2600")
  state States @default(ACT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  property Property @relation(fields: [propertyId], references: [id])
  propertyId String @unique

  @@map("addresses")
}


model Enquiry{
  id  String @id @default(cuid())
  property Property @relation(fields: [propertyId], references: [id])
  propertyId String

  user User? @relation(fields: [userId], references: [id])
  userId String?

  enquiryType EnquiryType @default(LISTING)
  enquirySubject String? @db.LongText
  enquiryMessage String? @db.LongText
  @@map("enquiry")
}


model PropertyImages{
  id String @id @default(cuid())
  imageLink String? @db.LongText
  imageDescription String? @db.LongText
  imageType PropertyImageType @default(ADDITIONAL)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  property Property? @relation(fields: [propertyId], references: [id])
  propertyId String?

  @@map("property_images") 
}